steps:
  - id: 'restore cache'
    name: gcr.io/${PROJECT_ID}/restore_cache
    args:
      [
        '--bucket=gs://${_CACHE_BUCKET}',
        '--key=node_modules-$( checksum yarn.lock )',
        '--key_fallback=node_modules-',
      ]

  - id: 'yarn install'
    name: node:${_NODE_VERSION}-alpine
    entrypoint: yarn
    args: ['install']

  - id: 'scan with trivy'
    name: 'aquasec/trivy:latest'
    args:
      - 'fs'
      - '--db-repository'
      - 'us-docker.pkg.dev/gr4vy-admin/aquasecurity/trivy-db'
      - '.'
    env:
      - 'TRIVY_EXIT_CODE=0'
      - 'TRIVY_NO_PROGRESS=true'
      - 'TRIVY_IGNORE_UNFIXED=true'

  - id: 'yarn build'
    name: node:${_NODE_VERSION}-alpine
    entrypoint: yarn
    args: ['build']

  - id: 'push to storage bucket'
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:340.0.0-alpine'
    entrypoint: gsutil
    args:
      [
        '-m',
        'cp',
        '-r',
        '-Z',
        './packages/embed-cdn/lib/gr4vy-embed.js',
        'gs://$_ARTIFACT_STORAGE_BUCKET/$COMMIT_SHA/embed.latest.js',
      ]

  - id: 'remove cache-control metadata'
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:340.0.0-alpine'
    entrypoint: gsutil
    args:
      [
        '-m',
        'setmeta',
        '-h',
        'Cache-Control',
        'gs://$_ARTIFACT_STORAGE_BUCKET/$COMMIT_SHA/**',
      ]

  - id: 'Set cache-control on assets'
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:340.0.0-alpine'
    entrypoint: gsutil
    args:
      [
        '-m',
        'setmeta',
        '-h',
        'Cache-Control: public, max-age=31536000',
        'gs://$_ARTIFACT_STORAGE_BUCKET/$COMMIT_SHA/**/*.js',
      ]

  - id: 'save cache'
    waitFor: ['yarn build']
    name: gcr.io/${PROJECT_ID}/save_cache
    args:
      [
        '--bucket=gs://${_CACHE_BUCKET}',
        '--key=node_modules-$( checksum yarn.lock )',
        '--path=node_modules',
        '--no-clobber',
      ]

  - id: verify github checks completed successfully
    name: 'gcr.io/${PROJECT_ID}/github-checks:1.0'
    args:
      - '--repo=${REPO_NAME}'
      - '--ref=${COMMIT_SHA}'
      - '--ignore=${TRIGGER_NAME} (${PROJECT_ID})'
    secretEnv:
      - GITHUB_TOKEN

  - id: 'deploy to sandbox environments'
    name: 'docker:20.10.5'
    entrypoint: 'ash'
    secretEnv:
      - GITHUB_TOKEN
    args:
      - '-c'
      - |
        # backslash-escape any non-delimiter whitespace and all other characters that
        # have special meaning to the shell, e.g. globs, parenthesis, ampersands, etc.
        INSTANCES='${_GR4VY_INSTANCES}'

        if [ "${BRANCH_NAME}" = "main" ]; then
          fail=0
          for instance in $${INSTANCES}; do
            echo "Triggering deploy of main branch to $${instance}-sandbox..."
            docker run --rm -e GITHUB_TOKEN --network=cloudbuild gcr.io/${PROJECT_ID}/deployer:latest deploy --id $${instance} --sandbox --repo ${REPO_NAME} --ref ${COMMIT_SHA} --skip-checks
            if [ $? -ne 0 ]; then
              fail=1
            fi
          done
          if [ $fail -eq 1 ]; then
            exit 1
          fi
        else
          echo "This is the ${BRANCH_NAME} branch. Not deploying to sandbox environments."
        fi;

  - id: 'deploy to production environments'
    name: 'docker:20.10.5'
    entrypoint: 'ash'
    secretEnv:
      - GITHUB_TOKEN
    args:
      - '-c'
      - |
        # backslash-escape any non-delimiter whitespace and all other characters that
        # have special meaning to the shell, e.g. globs, parenthesis, ampersands, etc.
        INSTANCES='${_GR4VY_INSTANCES}'

        if [ "${BRANCH_NAME}" = "main" ]; then
          fail=0
          for instance in $${INSTANCES}; do
            echo "Triggering deploy of main branch to $${instance}-production..."
            docker run --rm -e GITHUB_TOKEN --network=cloudbuild gcr.io/${PROJECT_ID}/deployer:latest deploy --id $${instance} --production --repo ${REPO_NAME} --ref ${COMMIT_SHA} --skip-checks
            if [ $? -ne 0 ]; then
              fail=1
            fi
          done
          if [ $fail -eq 1 ]; then
            exit 1
          fi
        else
          echo "This is the ${BRANCH_NAME} branch. Not deploying to production environments."
        fi;

substitutions:
  _NODE_VERSION: '24'
  _ARTIFACT_STORAGE_BUCKET: ''
  _CACHE_BUCKET: ''
  _GITHUB_TOKEN_LOCATION: ''
  _GR4VY_INSTANCES: ''

availableSecrets:
  secretManager:
    - versionName: ${_GITHUB_TOKEN_LOCATION}
      env: 'GITHUB_TOKEN'

tags:
  - 'gr4vy-build'

options:
  dynamic_substitutions: true
  substitution_option: 'ALLOW_LOOSE'
  machineType: 'E2_MEDIUM'
  logging: 'LEGACY'

logsBucket: 'gs://cloud-build-log-storage'

timeout: 1200s
